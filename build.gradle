buildscript {
    repositories {
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}


plugins {
    id "groovy"
    id "java"
    id "idea"
    id "signing"
    //id "ninja.miserable.blossom" version "1.0.1"
    id "com.github.johnrengelman.shadow" version "2.0.1"
    id "org.spongepowered.plugin" version "0.8.1"
    id "com.qixalite.spongestart2" version "4.0.0"

    id "net.minecrell.licenser" version "0.3"
}
apply plugin: 'net.minecraftforge.gradle.forge'
//project.gradle.startParameter.setLogLevel(LogLevel.INFO)

group = "${getProjectProperty('m_group')}"

version = "${getProjectProperty('minecraft_version')}-${getProjectProperty('m_major')}.${getProjectProperty('m_minor')}-${getProjectProperty('m_api')}-${getProjectProperty('m_suffix')}"
description = "${getProjectProperty('m_description')}"

if (System.getenv().BUILD_NUMBER != null) {
    version += "+${System.getenv().BUILD_NUMBER}"
}

compileJava {
    sourceCompatibility = targetCompatibility = "1.8"
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

repositories {
    jcenter()
    maven {
        name = "Gradle-Plugins"
        url = "https://plugins.gradle.org/m2"
    }
    maven {
        name = "Sponge"
        url = "http://repo.spongepowered.org/maven"
    }
    maven {
        name = "Forge"
        url = "http://files.minecraftforge.net/maven"
    }
    maven {
        name = "Nucleus"
        url = "http://repo.drnaylor.co.uk/artifactory/list/minecraft"
    }
    maven {
        name = "QuickStart"
        url = "http://repo.drnaylor.co.uk/artifactory/list/quickstart"
    }
    maven {
        name = "JitPack"
        url = "https://jitpack.io"
    }
}

dependencies {
    compile("org.spongepowered:spongeapi:${getProjectProperty('spongeapi')}")

    //compile("io.github.nucleuspowered:nucleus-api:${getProjectProperty('nucleus')}")
    //runtimeOnly("io.github.nucleuspowered:Nucleus:${getProjectProperty('nucleus')}")

    compile("javax.validation:validation-api:${getProjectProperty('validation')}")
}

/*shadowJar {
    dependencies {
        include(dependency("io.github.nucleuspowered:nucleus-api:${getProjectProperty('nucleus')}"))
    }
}*/

/*blossom {
    def pluginData = "src/main/java/io/github/poqdavid/spongerecords/PluginData.java"

    replaceToken "xidx", getProjectProperty('m_id'), pluginData
    replaceToken "XNAMEX", getProjectProperty('m_name'), pluginData
    replaceToken "@VERSION@", version, pluginData
    replaceToken "@DESCRIPTION@",  getProjectProperty('m_description'), pluginData
    replaceToken "@ORGANIZATION@", getProjectProperty('m_organization'), pluginData
    replaceToken "@AUTHORS@",  getProjectProperty('m_authors'), pluginData
    replaceToken "@URL@",  getProjectProperty('m_url'), pluginData
}*/

minecraft {
    version = getProjectProperty('forgeVersion')
    runDir = getProjectProperty('forge_rundir')

    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // simply re-run your setup task after changing the mappings to update your workspace.
     mappings = getProjectProperty('mcpVersion')
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
}

/*spongestart {
    minecraft "${getProjectProperty('minecraft_version')}"
    spongeForgeVersion getProjectProperty('spongeforge')
    forgeServerFolder "${getProjectProperty('spongeforgeServerFolder')}"
}*/

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", "${getProjectProperty('m_major')}.${getProjectProperty('m_minor')}"
    inputs.property "mcversion", getProjectProperty('minecraft_version')
    inputs.property "modid", getProjectProperty('m_id')
    inputs.property "description", getProjectProperty('m_description')
    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include "mcmod.info"

        // replace version and mcversion
        expand 'version': "${getProjectProperty('m_major')}.${getProjectProperty('m_minor')}", 'mcversion': getProjectProperty('minecraft_version')
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude "mcmod.info"
    }
    from 'LICENSE.txt'
}

license {
    header = file('HEADER.txt')
    newLine = false
    ext {
        name = getProjectProperty('m_name')
        organization = getProjectProperty('m_organization')
        url = getProjectProperty('m_url')
    }
    include '**/*.java'
    include '**/*.groovy'
}

signing {
    required { Project.hasProperty("signing.keyId") }
    sign configurations.archives, configurations.shadow
}

idea {
    module {
        inheritOutputDirs = true
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.1'
}

def String getProjectProperty(String propertyName) {
    String temp = "null"
    if (hasProperty(propertyName)) {
        temp = this.properties[propertyName]
        project.logger.log(LogLevel.WARN, "Found property: " + propertyName+" value: " + temp)
    } else {
        project.logger.log(LogLevel.ERROR, "Property (" + propertyName + ") not found!")
    }
    return temp
}

build.dependsOn(shadowJar)