buildscript {
    repositories {
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:3.+'
    }
}

plugins {
    id "groovy"
    id "java"
    id "idea"
    id "signing"
    id "com.github.johnrengelman.shadow" version "5.2.0"
    id "org.spongepowered.plugin" version "0.9.0"
    id "net.minecrell.licenser" version "0.4.1"
}
apply plugin: 'net.minecraftforge.gradle'


sponge.plugin.id = "${getProjectProperty('m_id')}"
group = "${getProjectProperty('m_group')}"
version = "${getProjectProperty('minecraft_version')}-${getProjectProperty('m_major')}.${getProjectProperty('m_minor')}-${getProjectProperty('m_api')}-${getProjectProperty('m_suffix')}"
description = "${getProjectProperty('m_description')}"

if (System.getenv().BUILD_NUMBER != null) {
    version += "+${System.getenv().BUILD_NUMBER}"
}

compileJava {
    sourceCompatibility = targetCompatibility = "1.8"
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

repositories {
    jcenter()
    maven {
        name = "Gradle-Plugins"
        url = "https://plugins.gradle.org/m2"
    }
    maven {
        name = "Sponge"
        url = "http://repo.spongepowered.org/maven"
    }
    maven {
        name = "Forge"
        url = "http://files.minecraftforge.net/maven"
    }
    maven {
        name = "Nucleus"
        url = "http://repo.drnaylor.co.uk/artifactory/list/minecraft"
    }
    maven {
        name = "QuickStart"
        url = "http://repo.drnaylor.co.uk/artifactory/list/quickstart"
    }
    maven {
        name = "JitPack"
        url = "https://jitpack.io"
    }
    maven {
        name = "CodeMC"
        url = "https://repo.codemc.org/repository/maven-public"
    }
}

configurations {
    compile.extendsFrom shadow
}

dependencies {
    minecraft "net.minecraftforge:forge:${getProjectProperty('forgeVersion')}"
    compile("org.spongepowered:spongeapi:${getProjectProperty('spongeapi')}")

    annotationProcessor("org.spongepowered:spongeapi:${getProjectProperty('spongeapi')}")

    compile("javax.validation:validation-api:${getProjectProperty('validation')}")
    compile group: 'commons-io', name: 'commons-io', version: '2.6'

}

minecraft {
    mappings channel: getProjectProperty('mappings_channel'), version: getProjectProperty('mappings_version')
}

artifacts {
    archives shadowJar
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", "${getProjectProperty('m_major')}.${getProjectProperty('m_minor')}"
    inputs.property "mcversion", getProjectProperty('minecraft_version')
    inputs.property "modid", getProjectProperty('m_id')
    inputs.property "description", getProjectProperty('m_description')
    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include "mcmod.info"

        // replace version and mcversion
        expand 'version': "${getProjectProperty('m_major')}.${getProjectProperty('m_minor')}", 'mcversion': getProjectProperty('minecraft_version')
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude "mcmod.info"
    }
    from 'LICENSE.txt'
}

license {
    header = file('HEADER.txt')
    newLine = true
    ext {
        name = getProjectProperty('m_name')
        organization = getProjectProperty('m_organization')
        url = getProjectProperty('m_url')
    }
    include '**/*.java'
    include '**/*.groovy'
}

signing {
    required { Project.hasProperty("signing.keyId") }
    sign configurations.archives, configurations.shadow
}

idea {
    module {
        inheritOutputDirs = true
    }
}


task copyJar(type: Copy) {
    from "build/libs/" + getProjectProperty('m_name') + "-" + version + ".jar"
    into 'C:/Minecraft/Servers/Sponge/mods'
    project.logger.log(LogLevel.WARN, 'Copied file: ' + getProjectProperty('m_name') + "-" + version + ".jar")
}

shadowJar {
    configurations = [project.configurations.shadow]
    relocate "org.bstats", "io.github.poqdavid.nyx.nyxtools.shaded.bstats"
    classifier = null // Remove "-all" suffix from output file name
}

String getProjectProperty(String propertyName) {
    String temp = "null"
    if (hasProperty(propertyName)) {
        temp = this.properties[propertyName]
        project.logger.log(LogLevel.WARN, "Found property: " + propertyName + " value: " + temp)
    } else {
        project.logger.log(LogLevel.ERROR, "Property (" + propertyName + ") not found!")
    }
    return temp
}

build.dependsOn shadowJar
//build.dependsOn copyJar